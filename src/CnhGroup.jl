struct ChGroupElement{N} <: AbstractCGroupElement{N}
    sym::Symbol
    inv::Symbol
    group_rep::Symbol

    function ChGroupElement{N}(sym, inv, grep) where N
        new{N}(sym, inv, grep)
    end
end

struct ChGroup{N} <:AbstractCGroup{N}
    sym::Symbol
    elements::LittleDict{Symbol, Symbol}
    
    function ChGroup{N}() where N
        @assert N ∈ (2, 3, 4, 6)
        if N == 2
            els = LittleDict(
                :E => :E,
                :C21 => :C21,
                :σh => :σh,
                :i => :i
            )
        elseif N == 3
            els = LittleDict(
                :E => :E,
                :C31 => :C32,
                :C32 => :C31,
                :σh => :σh,
                :S3 => :σhC32,
                :σhC32 => :S3
                )
        elseif N == 4
            els = LittleDict(
                :E => :E,
                :C41 => :C43,
                :C21 => :C21,
                :C43 => :C41,
                :σ1 => :σ1,
                :σ2 => :σ2,
                :σ1d => :σ2,
                :σ2d => :σ2
            )
        elseif N == 6
            els = LittleDict(
                :E => :E,
                :C61 => :C65,
                :C31 => :C32,
                :C21 => :C21,
                :C32 => :C31,
                :C65 => :C61,
                :σ1 => :σ1,
                :σ2 => :σ2,
                :σ3 => :σ3,
                :σ1d => :σ1d,
                :σ2d => :σ2d,
                :σ3d => :σ3d
            )
        end

        return new{N}(Symbol("C$(N)h"), els)
    end

end

ChGroup(N) = ChGroup{N}()

function (p::ChGroup{N})(s::Symbol) where N
    return ChGroupElement{N}(s, p.elements[s], p.sym)
end

Mtable[:C2h] = LittleDict(
    (:E, :E) => :E,
    (:C21, :E) => :C21,
    (:σh, :E) => :σh,
    (:i, :E) => :i,
    (:E, :C21) => :C21,
    (:C21, :C21) => :E,
    (:σh, :C21) => :i,
    (:i, :C21) => :σh,
    (:E, :σh) => :σh,
    (:C21, :σh) => :i,
    (:σh, :σh) => :E,
    (:i, :σh) => :C21,
    (:E, :i) => :i,
    (:C21, :i) => :σh,
    (:σh, :i) => :C21,
    (:i, :i) => :E
)

Mtable[:C3h] = LittleDict(
    (:E, :E) => :E,
    (:C31, :E) => :C31,
    (:C32, :E) => :C32,
    (:σh, :E) => :σh,
    (:S3, :E) => :S3,
    (:σhC32, :E) => :σhC32,
    (:E, :C31) => :C31,
    (:C31, :C31) => :C32,
    (:C32, :C31) => :E,
    (:σh, :C31) => :S3,
    (:S3, :C31) => :σhC32,
    (:σhC32, :C31) => :σh,
    (:E, :C32) => :C32,
    (:C31, :C32) => :E,
    (:C32, :C32) => :C31,
    (:σh, :C32) => :σhC32,
    (:S3, :C32) => :σh,
    (:σhC32, :C32) => :S3,
    (:E, :σh) => :σh,
    (:C31, :σh) => :S3,
    (:C32, :σh) => :σhC32,
    (:σh, :σh) => :E,
    (:S3, :σh) => :C31,
    (:σhC32, :σh) => :C32,
    (:E, :S3) => :S3,
    (:C31, :S3) => :σhC32,
    (:C32, :S3) => :σh,
    (:σh, :S3) => :C31,
    (:S3, :S3) => :C32,
    (:σhC32, :S3) => :E,
    (:E, :σhC32) => :σhC32,
    (:C31, :σhC32) => :σh,
    (:C32, :σhC32) => :S3,
    (:σh, :σhC32) => :C32,
    (:S3, :σhC32) => :E,
    (:σhC32, :σhC32) => :C31
)

Mtable[:C4h] = LittleDict(
    (:E, :E) => :E,
    (:C41, :E) => :C41,
    (:C21, :E) => :C21,
    (:C43, :E) => :C43,
    (:σ1, :E) => :σ1,
    (:σ2, :E) => :σ2,
    (:σ1d, :E) => :σ1d,
    (:σ2d, :E) => :σ2d,
    (:E, :C41) => :C41,
    (:C41, :C41) => :C21,
    (:C21, :C41) => :C43,
    (:C43, :C41) => :E,
    (:σ1, :C41) => :σ2d,
    (:σ2, :C41) => :σ1d,
    (:σ1d, :C41) => :σ1,
    (:σ2d, :C41) => :σ2,
    (:E, :C21) => :C21,
    (:C41, :C21) => :C43,
    (:C21, :C21) => :E,
    (:C43, :C21) => :C41,
    (:σ1, :C21) => :σ2,
    (:σ2, :C21) => :σ1,
    (:σ1d, :C21) => :σ2d,
    (:σ2d, :C21) => :σ1d,
    (:E, :C43) => :C43,
    (:C41, :C43) => :E,
    (:C21, :C43) => :C41,
    (:C43, :C43) => :C21,
    (:σ1, :C43) => :σ1d,
    (:σ2, :C43) => :σ2d,
    (:σ1d, :C43) => :σ2,
    (:σ2d, :C43) => :σ1,
    (:E, :σ1) => :σ1,
    (:C41, :σ1) => :σ1d,
    (:C21, :σ1) => :σ2,
    (:C43, :σ1) => :σ2d,
    (:σ1, :σ1) => :E,
    (:σ2, :σ1) => :C21,
    (:σ1d, :σ1) => :C41,
    (:σ2d, :σ1) => :C43,
    (:E, :σ2) => :σ2,
    (:C41, :σ2) => :σ2d,
    (:C21, :σ2) => :σ1,
    (:C43, :σ2) => :σ1d,
    (:σ1, :σ2) => :C21,
    (:σ2, :σ2) => :E,
    (:σ1d, :σ2) => :C43,
    (:σ2d, :σ2) => :C41,
    (:E, :σ1d) => :σ1d,
    (:C41, :σ1d) => :σ2,
    (:C21, :σ1d) => :σ2d,
    (:C43, :σ1d) => :σ1,
    (:σ1, :σ1d) => :C43,
    (:σ2, :σ1d) => :C41,
    (:σ1d, :σ1d) => :E,
    (:σ2d, :σ1d) => :C21,
    (:E, :σ2d) => :σ2d,
    (:C41, :σ2d) => :σ1,
    (:C21, :σ2d) => :σ1d,
    (:C43, :σ2d) => :σ2,
    (:σ1, :σ2d) => :C41,
    (:σ2, :σ2d) => :C43,
    (:σ1d, :σ2d) => :C21,
    (:σ2d, :σ2d) => :E   
)

Mtable[:C6h] = LittleDict(
    (:E, :E) => :E,
    (:C61, :E) => :C61,
    (:C31, :E) => :C31,
    (:C21, :E) => :C21,
    (:C32, :E) => :C32,
    (:C65, :E) => :C65,
    (:σ1, :E) => :σ1,
    (:σ2, :E) => :σ2,
    (:σ3, :E) => :σ3,
    (:σ1d, :E) => :σ1d,
    (:σ2d, :E) => :σ2d,
    (:σ3d, :E) => :σ3d,
    (:E, :C61) => :C61,
    (:C61, :C61) => :C31,
    (:C31, :C61) => :C21,
    (:C21, :C61) => :C32,
    (:C32, :C61) => :C65,
    (:C65, :C61) => :E,
    (:σ1, :C61) => :σ3d,
    (:σ2, :C61) => :σ1d,
    (:σ3, :C61) => :σ2d,
    (:σ1d, :C61) => :σ1,
    (:σ2d, :C61) => :σ2,
    (:σ3d, :C61) => :σ3,
    (:E, :C31) => :C31,
    (:C61, :C31) => :C21,
    (:C31, :C31) => :C32,
    (:C21, :C31) => :C65,
    (:C32, :C31) => :E,
    (:C65, :C31) => :C61,
    (:σ1, :C31) => :σ3,
    (:σ2, :C31) => :σ1,
    (:σ3, :C31) => :σ2,
    (:σ1d, :C31) => :σ3d,
    (:σ2d, :C31) => :σ1d,
    (:σ3d, :C31) => :σ2d,
    (:E, :C21) => :C21,
    (:C61, :C21) => :C32,
    (:C31, :C21) => :C65,
    (:C21, :C21) => :E,
    (:C32, :C21) => :C61,
    (:C65, :C21) => :C31,
    (:σ1, :C21) => :σ2d,
    (:σ2, :C21) => :σ3d,
    (:σ3, :C21) => :σ1d,
    (:σ1d, :C21) => :σ3,
    (:σ2d, :C21) => :σ1,
    (:σ3d, :C21) => :σ2,
    (:E, :C32) => :C32,
    (:C61, :C32) => :C65,
    (:C31, :C32) => :E,
    (:C21, :C32) => :C61,
    (:C32, :C32) => :C31,
    (:C65, :C32) => :C21,
    (:σ1, :C32) => :σ2,
    (:σ2, :C32) => :σ3,
    (:σ3, :C32) => :σ1,
    (:σ1d, :C32) => :σ2d,
    (:σ2d, :C32) => :σ3d,
    (:σ3d, :C32) => :σ1d,
    (:E, :C65) => :C65,
    (:C61, :C65) => :E,
    (:C31, :C65) => :C61,
    (:C21, :C65) => :C31,
    (:C32, :C65) => :C21,
    (:C65, :C65) => :C32,
    (:σ1, :C65) => :σ1d,
    (:σ2, :C65) => :σ2d,
    (:σ3, :C65) => :σ3d,
    (:σ1d, :C65) => :σ2,
    (:σ2d, :C65) => :σ3,
    (:σ3d, :C65) => :σ1,
    (:E, :σ1) => :σ1,
    (:C61, :σ1) => :σ1d,
    (:C31, :σ1) => :σ2,
    (:C21, :σ1) => :σ2d,
    (:C32, :σ1) => :σ3,
    (:C65, :σ1) => :σ3d,
    (:σ1, :σ1) => :E,
    (:σ2, :σ1) => :C31,
    (:σ3, :σ1) => :C32,
    (:σ1d, :σ1) => :C61,
    (:σ2d, :σ1) => :C21,
    (:σ3d, :σ1) => :C65,
    (:E, :σ2) => :σ2,
    (:C61, :σ2) => :σ2d,
    (:C31, :σ2) => :σ3,
    (:C21, :σ2) => :σ3d,
    (:C32, :σ2) => :σ1,
    (:C65, :σ2) => :σ1d,
    (:σ1, :σ2) => :C32,
    (:σ2, :σ2) => :E,
    (:σ3, :σ2) => :C31,
    (:σ1d, :σ2) => :C65,
    (:σ2d, :σ2) => :C61,
    (:σ3d, :σ2) => :C21,
    (:E, :σ3) => :σ3,
    (:C61, :σ3) => :σ3d,
    (:C31, :σ3) => :σ1,
    (:C21, :σ3) => :σ1d,
    (:C32, :σ3) => :σ2,
    (:C65, :σ3) => :σ2d,
    (:σ1, :σ3) => :C31,
    (:σ2, :σ3) => :C32,
    (:σ3, :σ3) => :E,
    (:σ1d, :σ3) => :C21,
    (:σ2d, :σ3) => :C65,
    (:σ3d, :σ3) => :C61,
    (:E, :σ1d) => :σ1d,
    (:C61, :σ1d) => :σ2,
    (:C31, :σ1d) => :σ2d,
    (:C21, :σ1d) => :σ3,
    (:C32, :σ1d) => :σ3d,
    (:C65, :σ1d) => :σ1,
    (:σ1, :σ1d) => :C65,
    (:σ2, :σ1d) => :C61,
    (:σ3, :σ1d) => :C21,
    (:σ1d, :σ1d) => :E,
    (:σ2d, :σ1d) => :C31,
    (:σ3d, :σ1d) => :C32,
    (:E, :σ2d) => :σ2d,
    (:C61, :σ2d) => :σ3,
    (:C31, :σ2d) => :σ3d,
    (:C21, :σ2d) => :σ1,
    (:C32, :σ2d) => :σ1d,
    (:C65, :σ2d) => :σ2,
    (:σ1, :σ2d) => :C21,
    (:σ2, :σ2d) => :C65,
    (:σ3, :σ2d) => :C61,
    (:σ1d, :σ2d) => :C32,
    (:σ2d, :σ2d) => :E,
    (:σ3d, :σ2d) => :C31,
    (:E, :σ3d) => :σ3d,
    (:C61, :σ3d) => :σ1,
    (:C31, :σ3d) => :σ1d,
    (:C21, :σ3d) => :σ2,
    (:C32, :σ3d) => :σ2d,
    (:C65, :σ3d) => :σ3,
    (:σ1, :σ3d) => :C61,
    (:σ2, :σ3d) => :C21,
    (:σ3, :σ3d) => :C65,
    (:σ1d, :σ3d) => :C31,
    (:σ2d, :σ3d) => :C32,
    (:σ3d, :σ3d) => :E
)
struct DGroupElement{N} <: AbstractCGroupElement{N}
    sym::Symbol
    inv::Symbol
    group_rep::Symbol

    function DGroupElement{N}(sym, inv, grep) where N
        new{N}(sym, inv, grep)
    end
end

struct DGroup{N} <:AbstractCGroup{N}
    sym::Symbol
    elements::LittleDict{Symbol, Symbol}
    
    function DGroup{N}() where N
        if N == 2
            els = LittleDict(
                :E => :E,
                :C21 => :C21,
                :d1 => :d1,
                :d2 => :d2
            )
        elseif N == 3
            els = LittleDict(
                :E => :E,
                :C31 => :C32,
                :C32 => :C31,
                :d1 => :d1,
                :d2 => :d2,
                :d3 => :d3
                )
        elseif N == 4
            els = LittleDict(
                :E => :E,
                :C41 => :C43,
                :C2 => :C2,
                :C43 => :C41,
                :d1 => :d1,
                :d2 => :d2,
                :d3 => :d3,
                :d4 => :d4
            )
        elseif N == 6
            els = LittleDict(
                :E => :E,
                :C61 => :C65,
                :C31 => :C32,
                :C21 => :C21,
                :C32 => :C31,
                :C65 => :C61,
                :d1 => :d1,
                :d2 => :d2,
                :d3 => :d3,
                :d4 => :d4,
                :d5 => :d5,
                :d6 => :d6
            )
        end

        return new{N}(Symbol("D$(N)"), els)
    end
end

DGroup(N) = DGroup{N}()

function (p::DGroup{N})(s::Symbol) where N
    return DGroupElement{N}(s, p.elements[s], p.sym)
end

Mtable[:D2] = LittleDict(
    (:E, :E) => :E,
    (:C21, :E) => :C21,
    (:d1, :E) => :d1,
    (:d2, :E) => :d2,
    (:E, :C21) => :C21,
    (:C21, :C21) => :E,
    (:d1, :C21) => :d2,
    (:d2, :C21) => :d1,
    (:E, :d1) => :d1,
    (:C21, :d1) => :d2,
    (:d1, :d1) => :E,
    (:d2, :d1) => :C21,
    (:E, :d2) => :d2,
    (:C21, :d2) => :d1,
    (:d1, :d2) => :C21,
    (:d2, :d2) => :E    
)

Mtable[:D3] = LittleDict(
    (:E, :E) => :E,
    (:C31, :E) => :C31,
    (:C32, :E) => :C32,
    (:d1, :E) => :d1,
    (:d2, :E) => :d2,
    (:d3, :E) => :d3,
    (:E, :C31) => :C31,
    (:C31, :C31) => :C32,
    (:C32, :C31) => :E,
    (:d1, :C31) => :d3,
    (:d2, :C31) => :d1,
    (:d3, :C31) => :d2,
    (:E, :C32) => :C32,
    (:C31, :C32) => :E,
    (:C32, :C32) => :C31,
    (:d1, :C32) => :d2,
    (:d2, :C32) => :d3,
    (:d3, :C32) => :d1,
    (:E, :d1) => :d1,
    (:C31, :d1) => :d2,
    (:C32, :d1) => :d3,
    (:d1, :d1) => :E,
    (:d2, :d1) => :C31,
    (:d3, :d1) => :C32,
    (:E, :d2) => :d2,
    (:C31, :d2) => :d3,
    (:C32, :d2) => :d1,
    (:d1, :d2) => :C32,
    (:d2, :d2) => :E,
    (:d3, :d2) => :C31,
    (:E, :d3) => :d3,
    (:C31, :d3) => :d1,
    (:C32, :d3) => :d2,
    (:d1, :d3) => :C31,
    (:d2, :d3) => :C32,
    (:d3, :d3) => :E
)

Mtable[:D4] = LittleDict(
    (:E, :E) => :E,
    (:C41, :E) => :C41,
    (:C2, :E) => :C2,
    (:C43, :E) => :C43,
    (:d1, :E) => :d1,
    (:d2, :E) => :d2,
    (:d3, :E) => :d3,
    (:d4, :E) => :d4,
    (:E, :C41) => :C41,
    (:C41, :C41) => :C2,
    (:C2, :C41) => :C43,
    (:C43, :C41) => :E,
    (:d1, :C41) => :d4,
    (:d2, :C41) => :d1,
    (:d3, :C41) => :d2,
    (:d4, :C41) => :d3,
    (:E, :C2) => :C2,
    (:C41, :C2) => :C43,
    (:C2, :C2) => :E,
    (:C43, :C2) => :C41,
    (:d1, :C2) => :d3,
    (:d2, :C2) => :d4,
    (:d3, :C2) => :d1,
    (:d4, :C2) => :d2,
    (:E, :C43) => :C43,
    (:C41, :C43) => :E,
    (:C2, :C43) => :C41,
    (:C43, :C43) => :C2,
    (:d1, :C43) => :d2,
    (:d2, :C43) => :d3,
    (:d3, :C43) => :d4,
    (:d4, :C43) => :d1,
    (:E, :d1) => :d1,
    (:C41, :d1) => :d2,
    (:C2, :d1) => :d3,
    (:C43, :d1) => :d4,
    (:d1, :d1) => :E,
    (:d2, :d1) => :C41,
    (:d3, :d1) => :C2,
    (:d4, :d1) => :C43,
    (:E, :d2) => :d2,
    (:C41, :d2) => :d3,
    (:C2, :d2) => :d4,
    (:C43, :d2) => :d1,
    (:d1, :d2) => :C43,
    (:d2, :d2) => :E,
    (:d3, :d2) => :C41,
    (:d4, :d2) => :C2,
    (:E, :d3) => :d3,
    (:C41, :d3) => :d4,
    (:C2, :d3) => :d1,
    (:C43, :d3) => :d2,
    (:d1, :d3) => :C2,
    (:d2, :d3) => :C43,
    (:d3, :d3) => :E,
    (:d4, :d3) => :C41,
    (:E, :d4) => :d4,
    (:C41, :d4) => :d1,
    (:C2, :d4) => :d2,
    (:C43, :d4) => :d3,
    (:d1, :d4) => :C41,
    (:d2, :d4) => :C2,
    (:d3, :d4) => :C43,
    (:d4, :d4) => :E
)

Mtable[:D6] = LittleDict(
    (:E, :E) => :E,
    (:C61, :E) => :C61,
    (:C31, :E) => :C31,
    (:C21, :E) => :C21,
    (:C32, :E) => :C32,
    (:C65, :E) => :C65,
    (:d1, :E) => :d1,
    (:d2, :E) => :d2,
    (:d3, :E) => :d3,
    (:d4, :E) => :d4,
    (:d5, :E) => :d5,
    (:d6, :E) => :d6,
    (:E, :C61) => :C61,
    (:C61, :C61) => :C31,
    (:C31, :C61) => :C21,
    (:C21, :C61) => :C32,
    (:C32, :C61) => :C65,
    (:C65, :C61) => :E,
    (:d1, :C61) => :d6,
    (:d2, :C61) => :d1,
    (:d3, :C61) => :d2,
    (:d4, :C61) => :d3,
    (:d5, :C61) => :d4,
    (:d6, :C61) => :d5,
    (:E, :C31) => :C31,
    (:C61, :C31) => :C21,
    (:C31, :C31) => :C32,
    (:C21, :C31) => :C65,
    (:C32, :C31) => :E,
    (:C65, :C31) => :C61,
    (:d1, :C31) => :d5,
    (:d2, :C31) => :d6,
    (:d3, :C31) => :d1,
    (:d4, :C31) => :d2,
    (:d5, :C31) => :d3,
    (:d6, :C31) => :d4,
    (:E, :C21) => :C21,
    (:C61, :C21) => :C32,
    (:C31, :C21) => :C65,
    (:C21, :C21) => :E,
    (:C32, :C21) => :C61,
    (:C65, :C21) => :C31,
    (:d1, :C21) => :d4,
    (:d2, :C21) => :d5,
    (:d3, :C21) => :d6,
    (:d4, :C21) => :d1,
    (:d5, :C21) => :d2,
    (:d6, :C21) => :d3,
    (:E, :C32) => :C32,
    (:C61, :C32) => :C65,
    (:C31, :C32) => :E,
    (:C21, :C32) => :C61,
    (:C32, :C32) => :C31,
    (:C65, :C32) => :C21,
    (:d1, :C32) => :d3,
    (:d2, :C32) => :d4,
    (:d3, :C32) => :d5,
    (:d4, :C32) => :d6,
    (:d5, :C32) => :d1,
    (:d6, :C32) => :d2,
    (:E, :C65) => :C65,
    (:C61, :C65) => :E,
    (:C31, :C65) => :C61,
    (:C21, :C65) => :C31,
    (:C32, :C65) => :C21,
    (:C65, :C65) => :C32,
    (:d1, :C65) => :d2,
    (:d2, :C65) => :d3,
    (:d3, :C65) => :d4,
    (:d4, :C65) => :d5,
    (:d5, :C65) => :d6,
    (:d6, :C65) => :d1,
    (:E, :d1) => :d1,
    (:C61, :d1) => :d2,
    (:C31, :d1) => :d3,
    (:C21, :d1) => :d4,
    (:C32, :d1) => :d5,
    (:C65, :d1) => :d6,
    (:d1, :d1) => :E,
    (:d2, :d1) => :C61,
    (:d3, :d1) => :C31,
    (:d4, :d1) => :C21,
    (:d5, :d1) => :C32,
    (:d6, :d1) => :C65,
    (:E, :d2) => :d2,
    (:C61, :d2) => :d3,
    (:C31, :d2) => :d4,
    (:C21, :d2) => :d5,
    (:C32, :d2) => :d6,
    (:C65, :d2) => :d1,
    (:d1, :d2) => :C65,
    (:d2, :d2) => :E,
    (:d3, :d2) => :C61,
    (:d4, :d2) => :C31,
    (:d5, :d2) => :C21,
    (:d6, :d2) => :C32,
    (:E, :d3) => :d3,
    (:C61, :d3) => :d4,
    (:C31, :d3) => :d5,
    (:C21, :d3) => :d6,
    (:C32, :d3) => :d1,
    (:C65, :d3) => :d2,
    (:d1, :d3) => :C32,
    (:d2, :d3) => :C65,
    (:d3, :d3) => :E,
    (:d4, :d3) => :C61,
    (:d5, :d3) => :C31,
    (:d6, :d3) => :C21,
    (:E, :d4) => :d4,
    (:C61, :d4) => :d5,
    (:C31, :d4) => :d6,
    (:C21, :d4) => :d1,
    (:C32, :d4) => :d2,
    (:C65, :d4) => :d3,
    (:d1, :d4) => :C21,
    (:d2, :d4) => :C32,
    (:d3, :d4) => :C65,
    (:d4, :d4) => :E,
    (:d5, :d4) => :C61,
    (:d6, :d4) => :C31,
    (:E, :d5) => :d5,
    (:C61, :d5) => :d6,
    (:C31, :d5) => :d1,
    (:C21, :d5) => :d2,
    (:C32, :d5) => :d3,
    (:C65, :d5) => :d4,
    (:d1, :d5) => :C31,
    (:d2, :d5) => :C21,
    (:d3, :d5) => :C32,
    (:d4, :d5) => :C65,
    (:d5, :d5) => :E,
    (:d6, :d5) => :C61,
    (:E, :d6) => :d6,
    (:C61, :d6) => :d1,
    (:C31, :d6) => :d2,
    (:C21, :d6) => :d3,
    (:C32, :d6) => :d4,
    (:C65, :d6) => :d5,
    (:d1, :d6) => :C61,
    (:d2, :d6) => :C31,
    (:d3, :d6) => :C21,
    (:d4, :d6) => :C32,
    (:d5, :d6) => :C65,
    (:d6, :d6) => :E
)